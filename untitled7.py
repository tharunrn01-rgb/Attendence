
    git push -u origin main 
git remote add origin https://github.com/your-username/your-repository-name.git 
git commit -m "Initial commit of Python script" 
git add your_python_file.py
    # Or to add all files in the current directory:
    git add .    git init
    # -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjANNUbtFD0LZz7opJTbSQpaHQvXV-95
"""

import cv2
import os
import csv
from datetime import datetime

# Set this environment variable to 0 to disable GPU usage in dlib
os.environ['COLAB_GPU'] = '0'
import face_recognition

# ----------------------
# Step 1: Load student images
# ----------------------
# Use forward slashes for the path
path = "/content/student/"   # Folder with student images
images = []
names = []

for file in os.listdir(path):
    img = cv2.imread(f"{path}/{file}")
    if img is not None:
        images.append(img)
        names.append(os.path.splitext(file)[0])  # filename = student name

# Encode known faces
known_encodings = []
for img in images:
    rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    enc = face_recognition.face_encodings(rgb_img)
    if enc:
        known_encodings.append(enc[0])

print(f"[INFO] Loaded {len(known_encodings)} students.")

# ----------------------
# Step 2: Prepare attendance folder & daily CSV
# ----------------------
attendance_folder = "attendance"
os.makedirs(attendance_folder, exist_ok=True)  # create folder if not exists

today = datetime.now().strftime("%Y-%m-%d")
filename = os.path.join(attendance_folder, f"attendance_{today}.csv")

# If file does not exist â†’ create with header
if not os.path.exists(filename):
    with open(filename, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Name", "Date", "Time"])

# Load already marked names from today's CSV (avoid duplicates across sessions)
attendance_list = []
with open(filename, "r") as f:
    reader = csv.reader(f)
    next(reader)  # skip header
    for row in reader:
        if row:
            attendance_list.append(row[0])

print(f"[INFO] Already marked today: {attendance_list}")

# ----------------------
# Step 3: Start webcam
# ----------------------
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    faces = face_recognition.face_locations(rgb_frame)
    encodings = face_recognition.face_encodings(rgb_frame, faces)

    for encoding, face_loc in zip(encodings, faces):
        matches = face_recognition.compare_faces(known_encodings, encoding)
        if True in matches:
            idx = matches.index(True)
            name = names[idx]

            # Mark attendance only once per student per day
            if name not in attendance_list:
                now = datetime.now()
                date = now.strftime("%Y-%m-%d")
                time = now.strftime("%H:%M:%S")

                with open(filename, "a", newline="") as f:
                    writer = csv.writer(f)
                    writer.writerow([name, date, time])

                attendance_list.append(name)
                print(f"[MARKED] {name} at {time}")

            # Draw face box
            top, right, bottom, left = face_loc
            cv2.rectangle(frame, (left, top), (right, bottom), (0,255,0), 2)
            cv2.putText(frame, name, (left, top-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,255,0), 2)

    cv2.imshow("Attendance System", frame)

    # Press 'q' to quit
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
print(f"[INFO] Attendance saved to {filename}")

!pip install face_recognition
